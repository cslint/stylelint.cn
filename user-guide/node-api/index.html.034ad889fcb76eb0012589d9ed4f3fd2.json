{"head":{"description":"The stylelint Node API The stylelint module includes a lint() function that provides the Node API. stylelint 模块中的 lint() 函数提供 Node API。…","title":"The stylelint Node API"},"body":"<h1 id=\"the-stylelint-node-api\"><a href=\"#the-stylelint-node-api\" class=\"phenomic-HeadingAnchor\">#</a>The stylelint Node API</h1>\n<p>The stylelint module includes a <code>lint()</code> function that provides the Node API.</p>\n<p>stylelint 模块中的 <code>lint()</code> 函数提供 Node API。</p>\n<pre><code class=\"hljs language-js\">stylelint.lint(options)\n  .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">resultObject</span>) </span>{ .. });</code></pre>\n<h2 id=\"installation\"><a href=\"#installation\" class=\"phenomic-HeadingAnchor\">#</a>Installation</h2>\n<p>stylelint is an <a href=\"https://www.npmjs.com/package/stylelint\">npm package</a>. Install it using:</p>\n<p>stylelint 是一个 <a href=\"https://www.npmjs.com/package/stylelint\">npm 包</a>。通过以下命令进行安装：</p>\n<pre><code class=\"hljs language-console\">npm <span class=\"hljs-keyword\">install</span> stylelint</code></pre>\n<h2 id=\"options\"><a href=\"#options\" class=\"phenomic-HeadingAnchor\">#</a>Options</h2>\n<p>Options is an object with the following properties.</p>\n<p>Options 是一个对象类型，带有以下属性。</p>\n<p>Though both <code>files</code> and <code>code</code> are \"optional\", you <em>must</em> have one and <em>cannot</em> have both. All other options are optional.</p>\n<p>虽然 <code>files</code> 和 <code>code</code> 是可选的，你必须使用其中一个，不能两个都不使用。所有其他的选项都是可选的。</p>\n<h3 id=\"code\"><a href=\"#code\" class=\"phenomic-HeadingAnchor\">#</a><code>code</code></h3>\n<p>A CSS string to be linted.</p>\n<p>要检测的 CSS 文本字符串。</p>\n<h3 id=\"codefilename\"><a href=\"#codefilename\" class=\"phenomic-HeadingAnchor\">#</a><code>codeFilename</code></h3>\n<p>If using <code>code</code> to pass a source string directly, you can use <code>codeFilename</code> to associate that code with a particular filename.</p>\n<p>如果使用 <code>code</code> 直接把源字符串传过去，你可以使用 <code>codeFilename</code> 将代码和一个特定的文件名联系起来。</p>\n<p>This can be useful, for example, when making a text editor plugin that passes in code directly but needs to still use the configuration's <code>ignoreFiles</code> functionality to possibly ignore that code.</p>\n<p>这会非常有用，比如，当一个文本编辑器插件直接操作代码，但需要使用配置中的 <code>ignoreFiles</code> 功能忽略这些代码。</p>\n<h3 id=\"config\"><a href=\"#config\" class=\"phenomic-HeadingAnchor\">#</a><code>config</code></h3>\n<p>A <a href=\"../configuration/\">stylelint configuration object</a>.</p>\n<p>一个 <a href=\"../configuration/\">stylelint 配置对象</a>。</p>\n<p>If no <code>config</code> or <code>configFile</code> is passed, stylelint will look for a <code>.stylelintrc</code> configuration file.</p>\n<p>如果没有 <code>config</code> 或 <code>configFile</code>，stylelint 将查找 <code>.stylelintrc</code> 配置文件。</p>\n<h3 id=\"configbasedir\"><a href=\"#configbasedir\" class=\"phenomic-HeadingAnchor\">#</a><code>configBasedir</code></h3>\n<p>An absolute path to the directory that relative paths defining <code>extends</code> and <code>plugins</code> are <em>relative to</em>.</p>\n<p>一个定义 <code>extends</code> 和 <code>plugins</code> 的相对路径的目录的绝对路径。</p>\n<p>If the <code>config</code> object passed uses relative paths, e.g. for <code>extends</code> or <code>plugins</code>, you are going to have to pass a <code>configBasedir</code>. If not, you do not need this.</p>\n<p>如果 <code>config</code> 对象使用相对路径，比如，对于 <code>extends</code> 或 <code>plugins</code>，你需要传递 <code>configBasedir</code>。反之，不需要。</p>\n<h3 id=\"configfile\"><a href=\"#configfile\" class=\"phenomic-HeadingAnchor\">#</a><code>configFile</code></h3>\n<p>The path to a JSON, YAML, or JS file that contains your <a href=\"../configuration/\">stylelint configuration object</a>.</p>\n<p>一个包含你的<a href=\"../configuration/\">stylelint 配置对象</a>的 JSON，YAML 或 JS 文件的路径。</p>\n<p>It should be either absolute or relative to the directory that your process is running from (<code>process.cwd()</code>). We'd recommend absolute.</p>\n<p>它应该是绝对路径或是相对于你的程序运行的目录（<code>process.cwd()</code>）的相对路径。我们推荐使用绝对路径。</p>\n<h3 id=\"configoverrides\"><a href=\"#configoverrides\" class=\"phenomic-HeadingAnchor\">#</a><code>configOverrides</code></h3>\n<p>A partial stylelint configuration object whose properties will override the existing config object, whether that config was loaded via the <code>config</code> option or a <code>.stylelintrc</code> file.</p>\n<p>部分 stylelint 配置对象的属性将会覆盖已存在的通过 <code>config</code> 选项或 <code>.stylelintrc</code> 文件加载的配置对象。</p>\n<p>The difference between the <code>configOverrides</code> and <code>config</code> options is this: If any <code>config</code> object is passed, stylelint does not bother looking for a <code>.stylelintrc</code> file and instead just uses whatever <code>config</code> object you've passed; but if you want to <em>both</em> load a <code>.stylelintrc</code> file <em>and</em> override specific parts of it, <code>configOverrides</code> does just that.</p>\n<p><code>configOverrides</code> 和 <code>config</code> 选项的不同点在于：如果使用了 <code>config</code> 对象，stylelint 就不会去查找 <code>.stylelintrc</code> 文件了，而是使用你传入的 <code>config</code> 对象；但是，如果你想加载 <code>.stylelintrc</code> 文件而且像覆盖特定的部分，<code>configOverrides</code> 就派上用场了。</p>\n<h3 id=\"files\"><a href=\"#files\" class=\"phenomic-HeadingAnchor\">#</a><code>files</code></h3>\n<p>A file glob, or array of file globs. Ultimately passed to <a href=\"https://github.com/isaacs/node-glob\">node-glob</a> to figure out what files you want to lint.</p>\n<p>一个文件 glob，或文件列表 glob。最终通过<a href=\"https://github.com/isaacs/node-glob\">node-glob</a>指出哪些文件是你想要检测的。</p>\n<p>Relative globs are considered relative to <code>process.cwd()</code>.</p>\n<p>相对的 glob 被认为是相对于 <code>process.cwd()</code>。</p>\n<p><code>node_modules</code> and <code>bower_components</code> are always ignored.</p>\n<p><code>node_modules</code> 和 <code>bower_components</code> 总是被忽略的。</p>\n<h3 id=\"formatter\"><a href=\"#formatter\" class=\"phenomic-HeadingAnchor\">#</a><code>formatter</code></h3>\n<p>Options: <code>\"json\"|\"string\"|\"verbose\"</code>, or a function. Default is <code>\"json\"</code>.</p>\n<p>选项：<code>\"json\"|\"string\"|\"verbose\"</code>，或一个函数。默认为 <code>\"json\"</code>。</p>\n<p>Specify the formatter that you would like to use to format your results.</p>\n<p>指定你想使用的格式化器来格式化你的检测结果。</p>\n<p>If you pass a function, it must fit the signature described in the <a href=\"../../developer-guide/formatters/\">Developer Guide</a>.</p>\n<p>如果你传递一个函数，它必须符合<a href=\"../../developer-guide/formatters/\">开发者指南</a>描述的特征。</p>\n<h3 id=\"ignoredisables\"><a href=\"#ignoredisables\" class=\"phenomic-HeadingAnchor\">#</a><code>ignoreDisables</code></h3>\n<p>If <code>true</code>, all disable comments (e.g. <code>/* stylelint-disable block-no-empty */</code>) will be ignored.</p>\n<p>如果为 <code>true</code>，所有的禁用注释(比如，<code>/* stylelint-disable block-no-empty */</code>) 将被忽略。</p>\n<p>You can use this option to see what your linting results would be like without those exceptions.</p>\n<p>你可以使用该选项查看不使用这样例外的情况下，你的检测结果是怎样的。</p>\n<h3 id=\"reportneedlessdisables\"><a href=\"#reportneedlessdisables\" class=\"phenomic-HeadingAnchor\">#</a><code>reportNeedlessDisables</code></h3>\n<p>If <code>true</code>, <code>ignoreDisables</code> will also be set to <code>true</code> and the returned data will contain a <code>needlessDisables</code> property, whose value is an array of objects, one for each source, with tells you which stylelint-disable comments are not blocking a lint warning.</p>\n<p>如果为 <code>true</code>，<code>ignoreDisables</code> 也将被设置为 <code>true</code>， 返回的结果数据将包含一个 <code>needlessDisables</code> 属性，该属性的值是个对象列表，每个对象，告诉你哪些 stylelint 禁用注释不在阻塞检测警告。</p>\n<p>Use this report to clean up your codebase, keeping only the stylelint-disable comments that serve a purpose.</p>\n<p>使用该报告来清理你的代码块，达到只有 stylelint 禁用注释在起作用的目的。</p>\n<p><em>The recommended way to use this option is through the CLI.</em> It will output a clean report to the console.</p>\n<p><em>推荐通过命令行来使用此选项。</em> 它将在控制台输入一个清晰的报告。</p>\n<h3 id=\"ignorepath\"><a href=\"#ignorepath\" class=\"phenomic-HeadingAnchor\">#</a><code>ignorePath</code></h3>\n<p>A path to a file containing patterns describing files to ignore. The path can be absolute or relative to <code>process.cwd()</code>. By default, stylelint looks for <code>.stylelintignore</code> in <code>process.cwd()</code>. See <a href=\"../configuration/#stylelintignore\">Configuration</a>.</p>\n<p>一个文件的路径，该文件包含要忽略文件的模式。该路径可以是绝对或相对于 <code>process.cwd()</code> 的路径。默认情况下，stylelint 会查找 在<code>process.cwd()</code> 中查找 <code>.stylelintignore</code>。查看<a href=\"../configuration/#stylelintignore\">配置</a>。</p>\n<h3 id=\"syntax\"><a href=\"#syntax\" class=\"phenomic-HeadingAnchor\">#</a><code>syntax</code></h3>\n<p>Options: <code>\"scss\"|\"less\"|\"sugarss\"</code></p>\n<p>选项：<code>\"scss\"|\"less\"|\"sugarss\"</code></p>\n<p>Specify a non-standard syntax that should be used to parse source stylesheets.</p>\n<p>指定一个非标准的语法，用来解析源样式表。</p>\n<p>If you do not specify a syntax, non-standard syntaxes will be automatically inferred by the file extensions <code>.scss</code>, <code>.less</code>, and <code>.sss</code>.</p>\n<p>如果你不指定一个语法，非标准的语法将会根据文件扩展名 <code>.scss</code>，<code>.less</code> 和 <code>.sss</code> 自动推断出来。</p>\n<p>See the <a href=\"#customsyntax\"><code>customSyntax</code></a> option below if you would like to use stylelint with a custom syntax.</p>\n<p>如果你想使用一个自定义的语法，查看下面的 <a href=\"#customsyntax\"><code>customSyntax</code></a> 选项。</p>\n<h3 id=\"customsyntax\"><a href=\"#customsyntax\" class=\"phenomic-HeadingAnchor\">#</a><code>customSyntax</code></h3>\n<p>An absolute path to a custom <a href=\"https://github.com/postcss/postcss#syntaxes\">PostCSS-compatible syntax</a> module.</p>\n<p>一个自定义的 <a href=\"https://github.com/postcss/postcss#syntaxes\">PostCSS-compatible syntax</a> 模块的绝对路径。</p>\n<p>Note, however, that stylelint can provide no guarantee that core rules will work with syntaxes other than the defaults listed for the <code>syntax</code> option above.</p>\n<p>但是请注意，stylelint 不保证核心规则能与自定义的语法正常工作，除非是上面 <code>syntax</code> 选项列出的默认语法。</p>\n<h2 id=\"the-returned-promise\"><a href=\"#the-returned-promise\" class=\"phenomic-HeadingAnchor\">#</a>The returned promise</h2>\n<p><code>stylelint.lint()</code> returns a Promise that resolves with an object containing the following properties:</p>\n<p><code>stylelint.lint()</code> 返回一个 Promise，它 resolve 一个包含以下属性的对象。</p>\n<h3 id=\"errored\"><a href=\"#errored\" class=\"phenomic-HeadingAnchor\">#</a><code>errored</code></h3>\n<p>Boolean. If <code>true</code>, at least one rule with an \"error\"-level severity registered a warning.</p>\n<p>布尔类型。如果为 <code>true</code>，至少有一条规则是错误级别的警告。</p>\n<h3 id=\"output\"><a href=\"#output\" class=\"phenomic-HeadingAnchor\">#</a><code>output</code></h3>\n<p>A string displaying the formatted warnings (using the default formatter or whichever you passed).</p>\n<p>一个展示格式化后的警告（使用默认或你指定的格式化器）的字符串。</p>\n<h3 id=\"postcssresults\"><a href=\"#postcssresults\" class=\"phenomic-HeadingAnchor\">#</a><code>postcssResults</code></h3>\n<p>An array containing all the <a href=\"https://github.com/postcss/postcss/blob/master/docs/api.md#lazyresult-class\">PostCSS LazyResults</a> that were accumulated during processing.</p>\n<p>一个包含所有 <a href=\"https://github.com/postcss/postcss/blob/master/docs/api.md#lazyresult-class\">PostCSS LazyResults</a> 的列表，它们是在处理过程中积累起来的。</p>\n<h3 id=\"results\"><a href=\"#results\" class=\"phenomic-HeadingAnchor\">#</a><code>results</code></h3>\n<p>An array containing all the stylelint result objects (the objects that formatters consume).</p>\n<p>一个包含所有 stylelint 结果对象（格式化器处理过的对象）的列表。</p>\n<h2 id=\"syntax-errors\"><a href=\"#syntax-errors\" class=\"phenomic-HeadingAnchor\">#</a>Syntax errors</h2>\n<p><code>stylelint.lint()</code> does not reject the Promise when your CSS contains syntax errors.\nIt resolves with an object (see <a href=\"#the-returned-promise\">The returned promise</a>) that contains information about the syntax error.</p>\n<p>当你的 CSS 包含语法错误时，<code>stylelint.lint()</code> 不会 reject 对应的 Promise。它将 resolve 一个包含语法错误信息的对象(查看 <a href=\"#the-returned-promise\">返回的 promise</a>)。</p>\n<h2 id=\"usage-examples\"><a href=\"#usage-examples\" class=\"phenomic-HeadingAnchor\">#</a>Usage examples</h2>\n<p>If <code>myConfig</code> contains no relative paths for <code>extends</code> or <code>plugins</code>, you do not have to use <code>configBasedir</code>:</p>\n<p>如果 <code>myConfig</code> <em>不</em> 包含 <code>extends</code> 或 <code>plugins</code> 的相对路径，你可以不使用 <code>configBasedir</code>：</p>\n<pre><code class=\"hljs language-js\">stylelint.lint({\n  <span class=\"hljs-attr\">config</span>: myConfig,\n  <span class=\"hljs-attr\">files</span>: <span class=\"hljs-string\">\"all/my/stylesheets/*.css\"</span>\n})\n  .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{\n    <span class=\"hljs-comment\">// do things with data.output, data.errored,</span>\n    <span class=\"hljs-comment\">// and data.results</span>\n  })\n  .catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{\n    <span class=\"hljs-comment\">// do things with err e.g.</span>\n    <span class=\"hljs-built_in\">console</span>.error(err.stack);\n  });;</code></pre>\n<p>If <code>myConfig</code> <em>does</em> contain relative paths for <code>extends</code> or <code>plugins</code>, you <em>do</em> have to use <code>configBasedir</code>:</p>\n<p>如果 <code>myConfig</code> 包含 <code>extends</code> 或 <code>plugins</code> 的相对路径，你必须使用 <code>configBasedir</code>：</p>\n<pre><code class=\"hljs language-js\">stylelint.lint({\n  <span class=\"hljs-attr\">config</span>: myConfig,\n  <span class=\"hljs-attr\">configBasedir</span>: path.join(__dirname, <span class=\"hljs-string\">\"configs\"</span>),\n  <span class=\"hljs-attr\">files</span>: <span class=\"hljs-string\">\"all/my/stylesheets/*.css\"</span>\n}).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{ .. });</code></pre>\n<p>Maybe you want to use a CSS string instead of a file glob, and you want to use the string formatter instead of the default JSON:</p>\n<p>你可能想使用 CSS 字符串而不是一个文件 glob，而且想使用字符串格式化器而不是默认的 JSON：</p>\n<pre><code class=\"hljs language-js\">stylelint.lint({\n  <span class=\"hljs-attr\">code</span>: <span class=\"hljs-string\">\"a { color: pink; }\"</span>,\n  <span class=\"hljs-attr\">config</span>: myConfig,\n  <span class=\"hljs-attr\">formatter</span>: <span class=\"hljs-string\">\"string\"</span>\n}).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{ .. });</code></pre>\n<p>Maybe you want to use my own custom formatter function and parse <code>.scss</code> source files:</p>\n<p>你可能想要使用你自定义的格式化函数解析 <code>.scss</code> 源文件：</p>\n<pre><code class=\"hljs language-js\">stylelint.lint({\n  <span class=\"hljs-attr\">config</span>: myConfig,\n  <span class=\"hljs-attr\">files</span>: <span class=\"hljs-string\">\"all/my/stylesheets/*.scss\"</span>,\n  <span class=\"hljs-attr\">formatter</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">stylelintResults</span>) </span>{ .. },\n  <span class=\"hljs-attr\">syntax</span>: <span class=\"hljs-string\">\"scss\"</span>\n}).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{ .. });</code></pre>\n<p>The same pattern can be used to read Less or <a href=\"https://github.com/postcss/sugarss\">SugarSS</a> syntax.</p>\n<p>同样的模式可以被用来读取 Less 或 <a href=\"https://github.com/postcss/sugarss\">SugarSS</a> 语法。</p>\n","__filename":"user-guide/node-api.md","__url":"/user-guide/node-api/","__resourceUrl":"/user-guide/node-api/index.html","__dataUrl":"/user-guide/node-api/index.html.034ad889fcb76eb0012589d9ed4f3fd2.json"}