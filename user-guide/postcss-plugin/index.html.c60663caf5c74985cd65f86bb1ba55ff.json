{"head":{"description":"The stylelint PostCSS plugin As with any other PostCSS plugin, you can use stylelint's PostCSS plugin either with a PostCSS runner or with…","title":"The stylelint PostCSS plugin"},"body":"<h1 id=\"the-stylelint-postcss-plugin\"><a href=\"#the-stylelint-postcss-plugin\" class=\"phenomic-HeadingAnchor\">#</a>The stylelint PostCSS plugin</h1>\n<p>As with any other <a href=\"https://github.com/postcss/postcss#plugins\">PostCSS plugin</a>, you can use stylelint's PostCSS plugin either with a PostCSS runner or with the PostCSS JS API directly.</p>\n<p>与其他<a href=\"https://github.com/postcss/postcss#plugins\">PostCSS 插件</a>一样，你可以使用 stylelint 的 PostCSS 插件</p>\n<p><em>However, if a dedicated stylelint task runner plugin <a href=\"../complementary-tools/\">is available</a> (e.g. <a href=\"https://github.com/olegskl/gulp-stylelint\">gulp-stylelint</a> or <a href=\"https://github.com/wikimedia/grunt-stylelint\">grunt-stylelint</a>) we recommend you use that rather than this plugin, as they provide better reporting.</em></p>\n<p><em>但是，如果有一个专门的 stlyelint <a href=\"../complementary-tools/\">插件</a> (如 <a href=\"https://github.com/olegskl/gulp-stylelint\">gulp-stylelint</a> 或 <a href=\"https://github.com/wikimedia/grunt-stylelint\">grunt-stylelint</a>)，我们推荐你使用它们，因为它们会提供更好输出。</em></p>\n<h2 id=\"installation\"><a href=\"#installation\" class=\"phenomic-HeadingAnchor\">#</a>Installation</h2>\n<p>stylelint is an <a href=\"https://www.npmjs.com/package/stylelint\">npm package</a>. Install it using:</p>\n<p>stylelint 是一个 <a href=\"https://www.npmjs.com/package/stylelint\">npm 包</a>。使用以下命令进行安装：</p>\n<pre><code class=\"hljs language-console\">npm <span class=\"hljs-keyword\">install</span> stylelint</code></pre>\n<h2 id=\"options\"><a href=\"#options\" class=\"phenomic-HeadingAnchor\">#</a>Options</h2>\n<p>The plugin accepts an options object as argument, with the following properties:</p>\n<p>插件接收一个对象选项作为参数，该对象有以下属性：</p>\n<h3 id=\"config\"><a href=\"#config\" class=\"phenomic-HeadingAnchor\">#</a><code>config</code></h3>\n<p>A <a href=\"../configuration/\">stylelint configuration object</a>.</p>\n<p>一个 <a href=\"../configuration/\">stylelint 配置对象</a>。</p>\n<p>If no <code>config</code> or <code>configFile</code> is passed, stylelint will look for a <code>.stylelintrc</code> configuration file.</p>\n<p>如果没有传递 <code>config</code> 或 <code>configFile</code>，stylelint 将查找一个 <code>.stylelintrc</code> 配置文件。</p>\n<h3 id=\"configfile\"><a href=\"#configfile\" class=\"phenomic-HeadingAnchor\">#</a><code>configFile</code></h3>\n<p>The path to a JSON, YAML, or JS file that contains your <a href=\"../configuration/\">stylelint configuration object</a>.</p>\n<p>一个包含你的 <a href=\"../configuration/\">stylelint 配置对象</a> 的 JSON，YAML 或 JS 文件路径。</p>\n<p>It should be either absolute or relative to the directory that your process is running from (<code>process.cwd()</code>). We'd recommend absolute.</p>\n<p>它应该是绝对路径或是相对于你的程序运行的目录（<code>process.cwd()</code>）的相对路径。我们推荐使用绝对路径。</p>\n<h3 id=\"configbasedir\"><a href=\"#configbasedir\" class=\"phenomic-HeadingAnchor\">#</a><code>configBasedir</code></h3>\n<p>An absolute path to the directory that relative paths defining <code>extends</code> and <code>plugins</code> are <em>relative to</em>.</p>\n<p>一个定义 <code>extends</code> 和 <code>plugins</code> 的相对路径的目录的绝对路径。</p>\n<p>This is only necessary if you passed an object directly through the <code>config</code> property. If you used\n<code>configFile</code>, this option is not necessary.</p>\n<p>如果你直接通过 <code>config</code> 属性传递一个对象，那么该选项是必须的。如果你使用的是 <code>configFile</code>，那么该选项不是必须的。</p>\n<p>If the <code>config</code> object passed uses relative paths, e.g. for <code>extends</code> or <code>plugins</code>, you are going to have to pass a <code>configBasedir</code>. If not, you do not need this.</p>\n<p>如果 <code>config</code> 对象使用相对路径，比如，对于 <code>extends</code> 或 <code>plugins</code>，你需要传递 <code>configBasedir</code>。反之，不需要。</p>\n<h3 id=\"configoverrides\"><a href=\"#configoverrides\" class=\"phenomic-HeadingAnchor\">#</a><code>configOverrides</code></h3>\n<p>A partial stylelint configuration object whose properties will override the existing config object, whether that config was loaded via the <code>config</code> option or a <code>.stylelintrc</code> file.</p>\n<p>部分 stylelint 配置对象的属性将会覆盖已存在的通过 <code>config</code> 选项或 <code>.stylelintrc</code> 文件加载的配置对象。</p>\n<p>The difference between the <code>configOverrides</code> and <code>config</code> options is this: If any <code>config</code> object is passed, stylelint does not bother looking for a <code>.stylelintrc</code> file and instead just uses whatever <code>config</code> object you've passed; but if you want to <em>both</em> load a <code>.stylelintrc</code> file <em>and</em> override specific parts of it, <code>configOverrides</code> does just that.</p>\n<p><code>configOverrides</code> 和 <code>config</code> 选项的不同点在于：如果使用了 <code>config</code> 对象，stylelint 就不会去查找 <code>.stylelintrc</code> 文件了，而是使用你传入的 <code>config</code> 对象；但是，如果你想加载 <code>.stylelintrc</code> 文件而且像覆盖特定的部分，<code>configOverrides</code> 就派上用场了。</p>\n<h3 id=\"ignoredisables\"><a href=\"#ignoredisables\" class=\"phenomic-HeadingAnchor\">#</a><code>ignoreDisables</code></h3>\n<p>If <code>true</code>, all disable comments (e.g. <code>/* stylelint-disable block-no-empty */</code>) will be ignored.</p>\n<p>如果为 <code>true</code>，所有的禁用注释(比如，<code>/* stylelint-disable block-no-empty */</code>) 将被忽略。</p>\n<p>You can use this option to see what your linting results would be like without those exceptions.</p>\n<p>你可以使用该选项查看不使用这样例外的情况下，你的检测结果是怎样的。</p>\n<h3 id=\"ignorepath\"><a href=\"#ignorepath\" class=\"phenomic-HeadingAnchor\">#</a><code>ignorePath</code></h3>\n<p>A path to a file containing patterns describing files to ignore. The path can be absolute or relative to <code>process.cwd()</code>. By default, stylelint looks for <code>.stylelintignore</code> in <code>process.cwd()</code>. See <a href=\"../configuration/#stylelintignore\">Configuration</a>.</p>\n<p>一个文件的路径，该文件包含要忽略文件的模式。该路径可以是绝对或相对于 <code>process.cwd()</code> 的路径。默认情况下，stylelint 会查找 在<code>process.cwd()</code> 中查找 <code>.stylelintignore</code>。查看<a href=\"../configuration/#stylelintignore\">配置</a>。</p>\n<h2 id=\"usage-examples\"><a href=\"#usage-examples\" class=\"phenomic-HeadingAnchor\">#</a>Usage examples</h2>\n<p>We recommend you lint your CSS before applying any transformations. You can do this by either:</p>\n<p>我们推荐你在应用任何转换之前检测你的 CSS。你可以：</p>\n<ul>\n<li>creating a separate lint task that is independent of your build one.</li>\n<li>创建一个单独的检测任务，独立于你的构建。</li>\n<li>using the <a href=\"https://github.com/postcss/postcss-import#plugins\"><code>plugins</code> option</a> of <a href=\"https://github.com/postcss/postcss-import\"><code>postcss-import</code></a> or <a href=\"https://github.com/TrySound/postcss-easy-import\"><code>postcss-easy-import</code></a> to lint the your files before any transformations.</li>\n<li>使用 <a href=\"https://github.com/postcss/postcss-import\"><code>postcss-import</code></a> 或 <a href=\"https://github.com/TrySound/postcss-easy-import\"><code>postcss-easy-import</code></a> 的 <a href=\"https://github.com/postcss/postcss-import#plugins\"><code>plugins</code> 选项</a> 在转换之前检测你的文件。</li>\n<li>placing stylelint at the beginning of your plugin pipeline.</li>\n<li>将 stylelint 放在你的插件管道前面。</li>\n</ul>\n<p>You'll also need to use a reporter. <em>The stylelint plugin registers warnings via PostCSS</em>. Therefore, you'll want to use it with a PostCSS runner that prints warnings or another PostCSS plugin whose purpose is to format and print warnings (e.g. <a href=\"https://github.com/postcss/postcss-reporter\"><code>postcss-reporter</code></a>).</p>\n<p>你也需要使用一个报告。<em>stylelint 插件通过 PostCSS 注册警告</em>。因此，你要结合 PostCSS 运行器或其他格式化打印警告的PostCSS 插件来使用。</p>\n<h3 id=\"example-a\"><a href=\"#example-a\" class=\"phenomic-HeadingAnchor\">#</a>Example A</h3>\n<p>A separate lint task that uses the plugin via the PostCSS JS API to lint Less using <a href=\"https://github.com/webschik/postcss-less\"><code>postcss-less</code></a>.</p>\n<p>一个单独的检测任务样例，它使用<a href=\"https://github.com/webschik/postcss-less\"><code>postcss-less</code></a> 调用 PostCSS JS API 检测 Less。</p>\n<p><em>Note: the stylelint PostCSS plugin, unlike the stylelint CLI and node API, doesn't have a <code>syntax</code> option. So, the syntax must be set within the <a href=\"https://github.com/postcss/postcss#options\">PostCSS options</a> as there can only be one parser/syntax in a pipeline.</em></p>\n<p><em>注意：stlyelint 的 PostCSS 插件，不像 stylelint 的命令行和 Node API，没有 <code>syntax</code> 选项。因此，必须在<a href=\"https://github.com/postcss/postcss#options\">PostCSS 选项</a>中设置 <code>syntax</code>，在一个管道中有且只能有一个解析器或语法</em></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"fs\"</span>)\n<span class=\"hljs-keyword\">var</span> less = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"postcss-less\"</span>)\n<span class=\"hljs-keyword\">var</span> postcss = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"postcss\"</span>)\n\n<span class=\"hljs-comment\">// CSS to be processed</span>\n<span class=\"hljs-keyword\">var</span> css = fs.readFileSync(<span class=\"hljs-string\">\"input.css\"</span>, <span class=\"hljs-string\">\"utf8\"</span>)\n\npostcss([\n  <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"stylelint\"</span>)({ <span class=\"hljs-comment\">/* your options */</span> })\n  <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"postcss-reporter\"</span>)({ <span class=\"hljs-attr\">clearMessages</span>: <span class=\"hljs-literal\">true</span> })\n])\n  .process(css, {\n    <span class=\"hljs-attr\">from</span>: <span class=\"hljs-string\">\"input.css\"</span>,\n    <span class=\"hljs-attr\">syntax</span>: less\n  })\n  .then()\n  .catch(<span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =></span> <span class=\"hljs-built_in\">console</span>.error(err.stack))</code></pre>\n<p>The same pattern can be used to lint SCSS or <a href=\"https://github.com/postcss/sugarss\">SugarSS</a> syntax.</p>\n<p>同样的模式可以被用来检测 SCSS 或 <a href=\"https://github.com/postcss/sugarss\">SugarSS</a> 语法。</p>\n<h3 id=\"example-b\"><a href=\"#example-b\" class=\"phenomic-HeadingAnchor\">#</a>Example B</h3>\n<p>A combined lint and build task where the plugin is used via the PostCSS JS API, but within <a href=\"https://github.com/postcss/postcss-import\"><code>postcss-import</code></a> (using the its <code>plugins</code> option) so that the source files are linted before any transformations.</p>\n<p>一个融合了检测和构建任务的样例，插件调用 PostCSS JS API，结合 <a href=\"https://github.com/postcss/postcss-import\"><code>postcss-import</code></a>使用(使用它的 <code>plugins</code> 选项)，因此，源文件在转换之前就进行了检测。</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"fs\"</span>)\n<span class=\"hljs-keyword\">var</span> postcss = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"postcss\"</span>)\n<span class=\"hljs-keyword\">var</span> stylelint = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"stylelint\"</span>)\n\n<span class=\"hljs-comment\">// CSS to be processed</span>\n<span class=\"hljs-keyword\">var</span> css = fs.readFileSync(<span class=\"hljs-string\">\"lib/app.css\"</span>, <span class=\"hljs-string\">\"utf8\"</span>)\n\npostcss(\n  processors: [\n    <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"postcss-import\"</span>)({\n      <span class=\"hljs-attr\">plugins</span>: [\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"stylelint\"</span>)({ <span class=\"hljs-comment\">/* your options */</span> })\n      ]\n    }),\n    <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"postcss-cssnext\"</span>)\n    <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"postcss-reporter\"</span>)({ <span class=\"hljs-attr\">clearMessages</span>: <span class=\"hljs-literal\">true</span> })\n  ]\n)\n  .process(css, { <span class=\"hljs-attr\">from</span>: <span class=\"hljs-string\">'lib/app.css'</span>, <span class=\"hljs-attr\">to</span>: <span class=\"hljs-string\">'app.css'</span> })\n  .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result</span>) </span>{\n    fs.writeFileSync(<span class=\"hljs-string\">'app.css'</span>, result.css);\n    <span class=\"hljs-keyword\">if</span> ( result.map ) fs.writeFileSync(<span class=\"hljs-string\">'app.css.map'</span>, result.map);\n  })\n  .catch(<span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =></span> <span class=\"hljs-built_in\">console</span>.error(err.stack))</code></pre>\n","__filename":"user-guide/postcss-plugin.md","__url":"/user-guide/postcss-plugin/","__resourceUrl":"/user-guide/postcss-plugin/index.html","__dataUrl":"/user-guide/postcss-plugin/index.html.c60663caf5c74985cd65f86bb1ba55ff.json"}